
import funkin.backend.assets.ModsFolder;
import funkin.backend.shaders.FunkinShader;
import openfl.filters.ShaderFilter;
import openfl.utils.Assets;

var start:Bool = true;
var videoCamera:FlxCamera;
var colorTransformShader:FunkinShader;
var floatvalve:Float = 0;
var virusShaderEnabled:Bool = false;
//var time2 = 98613;
var time:Float = 0;
var hook:Bool = false;
public var superZoomShit:Bool = false;
public var zoomar:Bool = false;
public var wing:Bool = false;


//TWEEN
var t:FlxTween;
var t2:FlxTween;
function postCreate() {
    for(sl in strumLines.members)
        sl.onNoteUpdate.add(updateNote);
    //camHUD.addShader(iLikeToMoveItMoveIt);
    
}

function update(elapsed) {

    time += elapsed;

    virusShader.time = time;
    virusShader.uEnabled = virusShaderEnabled;
    if (virusShaderEnabled)
        noteVelocity = lerp(noteVelocity, 0, 0.125);
}

function updateNote(event) {
    if (event.note.strumTime < time) {
        event.cancel();
        deleteNote(event.note);
    }
}

function create() {
    

    colorTransformShader = new FunkinShader(Assets.getText(Paths.fragShader("colorTransform")));
	colorTransformShader.redMultiplier = 1;
	colorTransformShader.greenMultiplier = 1;
	colorTransformShader.blueMultiplier = 1;
	colorTransformShader.alphaMultiplier = 1;
	colorTransformShader.redOffset = 0;
	colorTransformShader.greenOffset = 0;
	colorTransformShader.blueOffset = 0;
	colorTransformShader.alphaOffset = 0;
	FlxG.game.setFilters([new ShaderFilter(colorTransformShader)]);
	FlxG.game._filters.push(new ShaderFilter(colorTransformShader));

    
}


function postCreate() {
        //THAT GOD PART EVENTS
        var index = members.indexOf(dad);
        white = new FlxSprite(-800, -800);
        white.makeGraphic(FlxG.width * 2.3, FlxG.width * 2.3, 0xFFFFFFFF);
        white.scrollFactor.set(0, 0);
        white.alpha = 0;

        
        insert(index, white);


        virusShader = new CustomShader('virus');
        virusShader.uEnabled = true;
        virusShader.screenSize = [1280, 720];
        virusShader.colorMultiplier = 1;
        virusShader.colorTransform = true;
    
        camGame.addShader(virusShader);
        camHUD.addShader(virusShader);
        camNewHUD.addShader(virusShader);
        ember = new CustomShader('ember');
                
        image = new FlxSprite(0, 900);
        image.antialiasing = true;
        image.loadGraphic(Paths.image('noise2'));
        image.blend = 0;
        image.shader = ember;
        image.setGraphicSize(camGame.width * 3, camGame.height * 3);
        image.updateHitbox();
        image.screenCenter(FlxAxes.XY);
        image.scrollFactor.set(0,0);
        image.y +=1000;
        image.alpha = 0.3;
        //image.cameras = [camHUD];
        image.flipY = true;
        image.visible =false;
        add(image);

        glowParticles = new FlxTypedGroup();
        glowParticles.cameras = [camHUD];
        add(glowParticles);

        
    


    
} 

var time:Float = 0;
function postUpdate(elapsed:Float) { 

    time += elapsed;
    ember.iTime = time;
    virusShader.time = time;
} 

var boomnow = false;
function update(elapsed:Float)
{
    if(glowParticles != null && boomnow)
        {
            lifeTime -= FlxG.elapsed;
            glowParticles.forEach(function(spr:FlxSprite)
                {
                    if(lifeTime < 0)
                        {
                            lifeTime = 0;
                            spr.alpha -= 0.8 * FlxG.elapsed;
                            if(spr.alpha > 0)
                            {
                                spr.scale.set(originalScale * spr.alpha, originalScale * spr.alpha);
                                floating();
                            }

                            if(spr.alpha < 0)
                                {
                                    
                                    spr.kill();
                                    glowParticles.remove(spr, true);
                                    spr.destroy();
                                    trace('KILL');
                                }
                        }
                });
        }
}

function stepHit()
    {
        switch(curStep){
            case 16:
                start = true;
                virusShader.uEnabled = false;
                camHUD.flash(FlxColor.WHITE, 0.5);
            case 128,132,136:
                defaultCamZoom +=0.1;
                camHUD.flash(FlxColor.WHITE, 0.5);
            case 144,400:
                defaultCamZoom = 0.6;
                zoomar = true;
            case 368,376,384,389,880,888,896,900,904,908:
                zoomar = false;
                defaultCamZoom +=0.1;
            case 640:
                zoomar = false;
                defaultCamZoom = 1;
            case 532:
                camHUD.flash(FlxColor.WHITE, 0.5);
            case 656:
                camHUD.flash(FlxColor.WHITE, 0.5);
                defaultCamZoom = 0.6;
                zoomar = true;
            case 912:
                camHUD.flash(FlxColor.WHITE, 0.5);
                defaultCamZoom = 0.6;
                zoomar = true;
            case 1040:
                defaultCamZoom = 0.9;
            case 1044:
                camHUD.flash(FlxColor.WHITE, 0.5);
                defaultCamZoom = 0.6;
            case 1152:
                zoomar = camZooming = false;
            case 1167:
                hook = true;
                FlxTween.tween(white, {alpha: 1}, 1, {ease: FlxEase.cubeOut});
                            
            case 1424:
                hook = false;
                virusShader.uEnabled = true;
                FlxTween.tween(white, {alpha: 0}, 3, {ease: FlxEase.cubeOut});
                       
            case 1440:
                virusShader.uEnabled = false;
                zoomar = camZooming = true;
                defaultCamZoom = 0.6;
                FlxG.camera.zoom = 0.6;
            case 1697:
                camHUD.flash(FlxColor.WHITE, 0.5);
                floating();
                image.visible =true;
                boomnow = true;
                superZoomShit = true;
            case 2080:
                camHUD.flash(FlxColor.WHITE, 0.5);
                FlxTween.tween(camHUD, {alpha: 0}, 3, {ease: FlxEase.cubeOut});
                FlxTween.tween(camNewHUD, {alpha: 0}, 3, {ease: FlxEase.cubeOut});
                FlxTween.tween(camGame, {alpha: 0}, 3, {ease: FlxEase.cubeOut});
                

         }
    }


    function onPlayerHit(event:NoteHitEvent) {
        if(!event.note.isSustainNote && hook)
        {
            dotrails(boyfriend).playAnim(playerStrums.characters[0].getAnimName(), true);
        }
    
    }
    
    function dotrails(char:Character)
        {
            var moveX:Int = char.x;
            var moveY:Int = char.y;
            var index = members.indexOf(char);
            trail = new Character(char.x,char.y,char.curCharacter,char.isPlayer);
            trail.playAnim(char.animation.curAnim.name);
           // trail.setColorTransform(1,1,1,50,50,50,50);
            trail.color = 0xFF000000;
            trail.blend = 1;
            trail.alpha = 0.5;
            insert(index,trail);
            //cpuStrums.characters = [dad,trail];
            switch(playerStrums.characters[0].getAnimName())
            {
                case 'singLEFT':
                    moveX -= 300;
                case 'singRIGHT':
                    moveX += 300;
                case 'singUP':
                    moveY -= 300;
                case 'singDOWN':
                    moveY += 30;
            }
            FlxTween.tween(trail, {alpha: 0, y: moveY, x: moveX}, 1, {ease: FlxEase.quintOut}).onComplete = function() {
            //   /  cpuStrums.characters = [dad];

            };
            return trail;
        }

    function beatHit()
        {
            if(curBeat == 292)
            {
                FlxTween.tween(FlxG.camera, {zoom: 0.9}, Conductor.crochet / 1000 * 356, {ease: FlxEase.cubeOut});
            }
            if (curBeat % 2 == 0 && superZoomShit)
                {
                    FlxG.camera.zoom += 0.03;
                    camHUD.zoom += 0.06;
                    
                }
            if (curBeat % 1 == 0 && superZoomShit)
                {
                    FlxG.camera.zoom += 0.04;
                    camHUD.zoom += 0.07;

                }
    
            if (curBeat % 2 == 0 && zoomar)
                {
                    FlxG.camera.zoom += 0.010;
                    camHUD.zoom += 0.02;
                }
            if (curBeat % 1 == 0 && zoomar)
                {
                    FlxG.camera.zoom += 0.015;
                    camHUD.zoom += 0.03;
                }
        }


        function particle(x:Float, y:Float)
            {
                
                pit = new FlxSprite(x,y);
                pit.antialiasing = true;
                pit.loadGraphic(Paths.image('game/pause/particle'));
                pit.color = 0xFFf54242;
                lifeTime = FlxG.random.float(0.6, 0.9);
                decay = FlxG.random.float(0.8, 1);
    
                originalScale = FlxG.random.float(0.75, 1);
                pit.scale.set(originalScale, originalScale);
                pit.alpha = 0.3;
                pit.scrollFactor.set(FlxG.random.float(0.3, 0.75), FlxG.random.float(0.65, 0.75));
                pit.velocity.set(FlxG.random.float(-40, 40), FlxG.random.float(-175, -250));
                pit.acceleration.set(FlxG.random.float(-10, 10), 25);
    
                
            }
    
            function floating()
                {
    
                    var particlesNum:Int = FlxG.random.int(0, 5);
                    var width:Float = (2000 / particlesNum);
                    var color:FlxColor = FlxColor.WHITE;
                    lifeTime = FlxG.random.float(0.6, 0.9);
                    decay = FlxG.random.float(0.8, 1);
                    for (j in 0...3)
                    {
                        for (i in 0...particlesNum)
                        {
                             
                           particle(-400 + width * i + FlxG.random.float(-width / 5, width / 5), FlxG.height + (FlxG.random.float(0, 125) + j * 40));
                           glowParticles.add(pit);
                         }
                    }
                }



    
